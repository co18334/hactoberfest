#include <stdio.h>
#include <time.h>

// N x N chessboard
int N;
int row1,col1;
int prints=1;
int count=0;

// Below arrays details all 8 possible movements for a knight.
// It is important to avoid changing sequence of below arrays
int row[] = { 2, 1, -1, -2, -2, -1, 1, 2 , 2 };
int col[] = { 1, 2, 2, 1, -1, -2, -2, -1, 1 };

// Check if (x, y) is valid chess board coordinates
// Note that a knight cannot go out of the chessboard
int isValid(int x, int y)
{
	if (x < 0 || y < 0 || x >= N || y >= N)
		return 0;

	return 1;
}

// Recursive function to perform the Knight's tour using backtracking
void KnightTour(int visited[N][N], int x, int y, int pos)
{
	// mark current square as visited
	visited[x][y] = pos;
	int i,j,k;
	// if all squares are visited, print the solution
	if (pos >= N*N)
	{
		if(prints==1)
		{
		for (i = 0; i < N; i++)
		{
			for (j = 0; j < N; j++)
				printf("%d\t",visited[i][j]);
				printf("\n");
				prints=2;
		}
		printf("\n");
		}
		// backtrack before returning
		visited[x][y] = 0;
		count++;
		return;
	}

	// check for all 8 possible movements for a knight
	// and recur for each valid movement
	for (k = 0; k < 8; k++)
	{
		// Get the new position of Knight from current
		// position on chessboard
		int newX = x + row[k];
		int newY = y + col[k];

		// if new position is a valid and not visited yet
		if (isValid(newX, newY) && !visited[newX][newY])
			KnightTour(visited, newX, newY, pos + 1);
	}
	// backtrack from current square and remove it from current path
	visited[x][y] = 0;
}

int main()
{
	// visited[][] serves two purpose -
	// 1. It keep track of squares involved the Knight's tour.
	// 2. It stores the order in which the squares are visited
	printf("Enter the board size: ");
	scanf("%d",&N);
	int visited[N][N];
	clock_t t;

	// initialize visited[][] by 0 (unvisited)
	memset(visited, 0, sizeof visited);

	int pos = 1;
	printf("Enter the start position:\n");
	printf("Enter row: ");
	scanf("%d",&row1);
	printf("Enter col: ");
	scanf("%d",&col1);
	t = clock();
	KnightTour(visited, row1, col1, pos);
	t=clock()-t;
	printf("The no. of solutions are %d\n",count);
		double time_taken = ((double)t)/CLOCKS_PER_SEC; // in seconds 
    printf("The function took %f seconds to execute \n", time_taken);
	return 0;
}
